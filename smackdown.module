<?php
// $Id$

/**
 * @file smackdown.module
 *
 * Pit two nodes against one another and vote for the winner.
 * Choose what content type to reference in the smackdown content type's
 * nodereference settings. (admin/content/node-type/smackdown/fields)
 */

/**
 * Implementation of hook_perm().
 */
function smackdown_perm() {
  return array('view smackdowns', 'vote on smackdowns');
}

/**
 * Implementation of hook_init().
 */
function smackdown_init() {
  drupal_add_js(drupal_get_path('module', 'smackdown') .'/smackdown.js');
}

/**
 * Implementation of hook_menu().
 */
function smackdown_menu() {
  $items['smackdown'] = array(
    'page callback'     => 'smackdown_page',
    'access arguments'  => array('view smackdowns'),
    'type'              => MENU_CALLBACK,
  );
  $items['smackdown/vote'] = array(
    'page callback'     => 'smackdown_vote',
    'access arguments'  => array('vote on smackdowns'),
    'type'              => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu callback to display a random smackdown node.
 *
 * @return
 *   A string of where to go.
 */
function smackdown_page() {
	$dest = smackdown_next();
	drupal_goto($dest);
}

/**
 * Determine the next smackdown randomly.
 */
function smackdown_next() {
  $smackdown_diff = array();

  // get a list of all smackdowns the user has already voted upon
  $smackdown_user_log = isset($_SESSION['smackdown_user_log']) ? $_SESSION['smackdown_user_log'] : array();

  // get a list of all created smackdowns
  $smackdowns = smackdown_get_smackdowns();

  // user has voted before?
  if (empty($smackdown_user_log) && !empty($smackdowns)) {
    // show a random smackdown within the same type
    $keys = array_keys($smackdowns);
    $nid = array_rand($keys);
    $smackdown_diff = array($keys[$nid]);
  }
  else {
    // compare the list of smackdowns to what the user has already voted upon
    if (!empty($smackdowns)) {
      $smackdown_diff = array_diff(array_keys($smackdowns), $smackdown_user_log);
    }
    // are there any smackdowns left?
    if (!$smackdowns || !$smackdown_diff) {
      // ask user to create one if allowed
      if (user_access("create smackdown")) {
        drupal_set_message(t("All out of smackdowns, would you like to create one yourself?"));
      }
      else {
        drupal_set_message(t("Login to create additional smackdowns."));
      }
    }
  }

  if (empty($smackdown_diff)) {
    return 'node/add/smackdown';
  }
  else {
  	$smackdown_diff = array_values($smackdown_diff);
    $random_key = array_rand(array_keys($smackdown_diff));
    return 'node/'. $smackdown_diff[$random_key];
  }
}

/**
 * Get a list of all created smackdowns.
 *
 * @return
 *   An array of smackdown node objects.
 */
function smackdown_get_smackdowns() {
  // find all smackdowns
  $results = db_query("SELECT * FROM {node} WHERE type = 'smackdown' AND status = 1");
  while ($row = db_fetch_object($results)) {
    $smackdowns[$row->nid] = $row;
  }
  return $smackdowns;
}

/**
 * Voting mechanism.
 *
 * @param $cid
 *   Content id that was voted for.
 *
 * @param $sid
 *   Smackdown node id.
 */
function smackdown_vote($cid = NULL, $sid = NULL) {
  if (!$cid) {
    $cid = $_GET['cid'];
  }
  if (!$value) {
    $sid = $_GET['sid'];
  }
  if (is_numeric($cid) && is_numeric($sid)) {
    // contruct our $vote array
    $vote = array(
      'content_type'  => 'node',
      'content_id'    => $sid,
      'value'         => $cid,
      'value_type'    => 'option',
      'tag'           => 'smackdown',
    );
    // Save voting results.
    $results = votingapi_set_votes($vote);

    // Set user session var to include this $nid
    $_SESSION['smackdown_user_log'][] = $sid;

    drupal_set_header('text/javascript');
    print drupal_to_js(array('url' => smackdown_next(), 'results' => $results));
    die();
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function smackdown_nodeapi(&$node, $op) {
  if ($op == 'view' && $node->type == 'smackdown') {
    // a log of previous votes are stored in $_SESSION
    if (!empty($_SESSION['smackdown_user_log'])) {
      $prev_votes = array_reverse($_SESSION['smackdown_user_log']);
    
      if (!empty($prev_votes)) {
        // get the results for the last smackdown voted upon
        $prev_results = smackdown_results(node_load($prev_votes[0]));

        // append the results of the previous smackdown to $node->content
        $node->content['prev_results'] = array('#value' => $prev_results, '#weight' => $node->content['body']['#weight']--);
      }
    }
  }
}

/**
 * Function to get the results of the previously voted upon node.
 *
 * @param $node
 *   The node object of the smackdown we want results for.
 */
function smackdown_results($node) {
  $refs = array($node->field_ref1, $node->field_ref2);
  foreach ($refs as $ref) {
    $criteria = array(
      'content_type' => 'node',
      'content_id' => $node->nid,
      'tag' => 'smackdown',
      'function' => 'option-'. $ref[0]['nid'],
    );
    $results[$ref[0]['nid']] = votingapi_select_results($criteria);
    $results[$ref[0]['nid']]['title'] = node_load($ref[0]['nid'])->title;
  }
  // append the results to our smackdown node
  return theme('smackdown_results', $node, $results);
}

/**
 * Implementation of hook_link().
 *
 * Provide a link to skip to the next smackdown.
 */
function smackdown_link($type, $node, $teaser = FALSE) {
  $links = array();
  if ($node->type == 'smackdown') {
    $links['smackdown_next'] = array(
      'title' => t('Next Smackdown Â»'),
      'href' => 'smackdown',
    );
  }
  return $links;
}

function smackdown_theme() {
  return array(
    'smackdown_results' => array(
      'arguments' => array(
        'node' => NULL,
        'prev_node' => NULL,
      ),
    ),
  );
}

function theme_smackdown_results($node, $results) {
	$node_ref1 = $node->field_ref1[0]['nid'];
	$node_ref2 = $node->field_ref2[0]['nid'];

	// turn the results into a percentage
	$votes = $results[$node_ref1][0]['value'] + $results[$node_ref2][0]['value'];
	$percentage_ref1 = round(($results[$node_ref1][0]['value'] / $votes) * 100) .'%';
	$percentage_ref2 = round(($results[$node_ref2][0]['value'] / $votes) * 100) .'%';

	// output
	$output = "<span class='smackdown_results_title'>Previous Smackdown: </span>";
  $output .= "<span class='smackdown_results_1'>". l($results[$node_ref1]['title'] .' ', 'node/'. $node_ref1) . $percentage_ref1 ."</span> | ";
  $output .= "<span class='smackdown_results_2'>". l($results[$node_ref2]['title'] .' ', 'node/'. $node_ref2) . $percentage_ref2 ."</span>";
  return $output;
}
