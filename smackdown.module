<?php
// $Id$

/**
 * @file smackdown.module
 *
 * Pit two nodes against one another and vote for the winner.
 * Choose what content type to reference in the smackdown content type's
 * nodereference settings. (admin/content/node-type/smackdown/fields)
 */

/**
 * Implementation of hook_perm().
 */
function smackdown_perm() {
  return array('view smackdowns', 'vote on smackdowns');
}

/**
 * Implementation of hook_init().
 */
function smackdown_init() {
  $path = drupal_get_path('module', 'smackdown');
  drupal_add_js($path .'/smackdown.js');
}

/**
 * Implementation of hook_menu().
 */
function smackdown_menu() {
  $items['smackdown'] = array(
    'page callback'     => 'smackdown_page',
    'access arguments'  => array('view smackdowns'),
    'type'              => MENU_CALLBACK,
  );
  $items['smackdown/vote'] = array(
    'page callback'     => 'smackdown_vote',
    'access arguments'  => array('vote on smackdowns'),
    'type'              => MENU_CALLBACK,
  );
  $items['node/%node/voting-results'] = array(
    'title'             => 'Results',
    'page callback'     => 'smackdown_results',
    'page arguments'    => array('page', 1),
    'access callback'   => 'smackdown_results_access',
    'access arguments'  => array(1),
    'type'              => MENU_LOCAL_TASK,
  );
  return $items;
}

function smackdown_results_access($node) {
  global $user;
  if ($node->type == 'smackdown' && user_access('view smackdowns', $user)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Menu callback to display a random smackdown node.
 *
 * @return
 *   A string of where to go.
 */
function smackdown_page() {
  $dest = smackdown_next();
  if (is_array($dest)) {
    drupal_goto($dest[0], $dest[1]);
  }
  drupal_goto($dest);
}

/**
 * Determine the next smackdown randomly.
 */
function smackdown_next() {
  $sql = db_rewrite_sql("SELECT node_smackdown.nid FROM {node} AS node_smackdown WHERE node_smackdown.type = 'smackdown' AND node_smackdown.status = 1 AND node_smackdown.nid NOT IN (SELECT v.content_id FROM {votingapi_vote} v WHERE v.content_type = 'node' AND v.uid = %d)", 'node_smackdown', 'nid');
  $sql .= '  LIMIT 1';
  $next = db_result(db_query($sql, $GLOBALS['user']->uid));
  // are there any smackdowns left?
  if (empty($next) ) {
    if (arg(1) != '') {
      $previous = arg(1);
    }
    else {
      $previous = $_SESSION['smackdown_vote'];
    }
    // return array here becuase & get's encoded if passed as a string to drupal_goto()
    return array('node/'. $previous .'/voting-results', 'last');
  }
  else {
    return 'node/'. $next;
  }
}

/**
 * Voting mechanism.
 *
 * @param $cid
 *   Content id that was voted for.
 *
 * @param $sid
 *   Smackdown node id.
 */
function smackdown_vote($cid = NULL, $sid = NULL) {
  if (!$cid) {
    $cid = $_GET['cid'];
  }
  if (!$value) {
    $sid = $_GET['sid'];
  }
  if (is_numeric($cid) && is_numeric($sid)) {
    // contruct our $vote array
    $vote = array(
      'content_type'  => 'node',
      'content_id'    => $sid,
      'value'         => $cid,
      'value_type'    => 'option',
      'tag'           => 'smackdown',
    );
    // Save voting results.
    $results = votingapi_set_votes($vote);
    
    // Set user session var to include this $nid
    $_SESSION['smackdown_vote'] = $sid;

    drupal_set_header('text/javascript');
    print drupal_to_js(array('results' => $results));
    exit();
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function smackdown_nodeapi(&$node, $op) {
  // make sure to only compare to the smackdown you are looking at in the URL
  if ($op == 'view' && $node->type == 'smackdown' && $node->nid == arg(1)) {
    // set a var for js
    drupal_add_js("var sid = $node->nid;", 'inline');

    // a log of previous votes are stored in $_COOKIE
    if (isset($_SESSION['smackdown_vote'])) {
      $prev_results = smackdown_results('short', node_load($_SESSION['smackdown_vote']));
      unset($_SESSION['smackdown_vote']);
      // append the results of the previous smackdown to $node->content
      $node->content['prev_results'] = array('#value' => $prev_results, '#weight' => $node->content['body']['#weight']--);
    }
  }
}

/**
 * Function to get the results of the previously voted upon node.
 *
 * @param $node
 *   The node object of the smackdown we want results for.
 */
function smackdown_results($view, $node) {
  $refs = array($node->field_ref1, $node->field_ref2);
  foreach ($refs as $ref) {
    $criteria = array(
      'content_type' => 'node',
      'content_id' => $node->nid,
      'tag' => 'smackdown',
      'function' => 'option-'. $ref[0]['nid'],
    );
    $results[$ref[0]['nid']] = votingapi_select_results($criteria);
    $results[$ref[0]['nid']]['title'] = node_load($ref[0]['nid'])->title;
  }
  
  if ($view == 'short') {
    return theme('smackdown_results_short', $node, $results);
  }
  else {
    return theme('smackdown_results', $node, $results);
  }
}

/**
 * Implementation of hook_link().
 *
 * Provide a link to skip to the next smackdown.
 */
function smackdown_link($type, $node, $teaser = FALSE) {
  $links = array();
  if ($node->type == 'smackdown') {
    $links['smackdown_next'] = array(
      'title' => t('Next Smackdown Â»'),
      'href' => 'smackdown/'. arg(1),
    );
  }
  return $links;
}

function smackdown_theme() {
  return array(
    'smackdown_results' => array(
      'arguments' => array(
        'node' => NULL,
        'prev_node' => NULL,
      ),
    ),
    'smackdown_results_short' => array(
      'arguments' => array(
        'node' => NULL,
        'prev_node' => NULL,
      ),
    ),
  );
}

function theme_smackdown_results($node, $results) {
  $node_ref1 = $node->field_ref1[0]['nid'];
  $node_ref2 = $node->field_ref2[0]['nid'];

  // turn the results into a percentage
  $votes = $results[$node_ref1][0]['value'] + $results[$node_ref2][0]['value'];

  $output = '<div class="poll">';
  if (isset($_GET['last'])) {
    $output .= '<br><div class="messages notice"><div>'. t("No more faceoffs to vote on. Would you like to !create?", array('!create' => l('create one yourself', 'node/add/smackdown'))) .'</div></div>';
  }
  foreach ($results as $nid => $node) {
    $percentage = $node[0]['value'] ? round(($node[0]['value'] / $votes) * 100) : 0;
    $output .= '
    <div class="text">'. l($node['title'], 'node/'. $nid) .'</div>
    <div class="bar">
      <div style="width: '. $percentage .'%;" class="foreground"></div>
    </div>
    <div class="percent">
      '. $percentage .'% ('. format_plural($votes, '1 vote', '@count votes') .')
    </div>';
  }
  $output .= '</div>';
  return $output;
}

function theme_smackdown_results_short($node, $results) {
  $node_ref1 = $node->field_ref1[0]['nid'];
  $node_ref2 = $node->field_ref2[0]['nid'];
  
  // turn the results into a percentage
  $votes = 0;
  $votes = $results[$node_ref1][0]['value'] + $results[$node_ref2][0]['value'];
  $count = 0;
  $output .= "<span class='smackdown_results_title'>Previous results: ". l($node->title, 'node/'. $node->nid .'/voting-results') ." </span>";
  foreach ($results as $nid => $node_ref) {
    $count++;
    $percentage = $votes ? round(($node_ref[0]['value'] / $votes) * 100) : 0;
    $output .= "<span class='smackdown_result'>". $node_ref['title'] .' '. $percentage ."%</span>";
    if ($count == 1) {
      $output .= " | ";
    }
  }
  
  return "<div class='smackdown-results-wrapper'>". $output ."</div>";
}

/**
 * Implementation of hook_views_api().
 */
function smackdown_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'smackdown'),
  );  
}